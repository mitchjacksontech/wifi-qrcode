#!/usr/bin/env perl
use v5.28;
use feature 'signatures';
no warnings 'experimental::signatures';
use Getopt::Long qw(GetOptions);
use Imager::QRCode;
use Pod::Usage qw(pod2usage);

my $authtype        = "WPA";
my $bgcolor         = "";
my $color           = "";
my $correction      = "L";
my $debug           = "";
my $dotsize         = "2";
my $filename        = "wifi-qrcode.png";
my $help            = "";
my $margin          = "2";
my $password        = "";
my $ssid            = "";
my $ssid_hidden     = "";
my @DEFAULT_BGCOLOR = (255, 255, 255, 0);    # rgba transparent for PNG, white otherwise
my @DEFAULT_COLOR   = (0,   0,   0);         # rgb black

parse_args_or_show_help();
if ($debug) { show_debug(); }
write_qrcode();
exit(0);

sub barcode_string() {
  return join(
    ";" => (

      # SSID
      ('WIFI:S:' . escape_special_characters($ssid)),

      # Network Type
      ('T:' . uc($authtype)),

      # SSID is hidden
      ($ssid_hidden ? 'H:true' : ()),

      # Password
      ($password ? 'P:' . escape_special_characters($password) : ()),
    )
  ) . ';;';
}

sub escape_special_characters ($str) {

  # backslash escape the five special characters defined in the spec
  # \ ; , " :

  no warnings 'uninitialized';
  (my $result = $str) =~ s/[\\\;\,\"\:]//g;
  return $result;
}

sub parse_args_or_show_help() {

  # parse opts
  GetOptions(
    "authtype:s"   => \$authtype,
    "bgcolor:s"    => \$bgcolor,
    "color:s"      => \$color,
    "correction:s" => \$correction,
    "debug"        => \$debug,
    "dotsize:i"    => \$dotsize,
    "filename:s"   => \$filename,
    "help"         => \$help,
    "hidden"       => \$ssid_hidden,
    "margin:i"     => \$margin,
  ) or pod2usage(2);

  # parse args
  ($ssid, $password) = @ARGV;

  # Respond to help flag
  if ($help) { pod2usage(1); }

  # Missing ssid
  if (!$ssid) { pod2usage({ -message => 'Specify SSID and password', -exit_status => 1 }); }

  # Invalid wep/wpa setting
  if ($authtype !~ /^(WPA|WEP)$/i) { pod2usage({ -message => 'Choose authtype WPA or WEP', -exit_status => 2 }); }

  # Invalid HTML color string
  for my $arg ($color, $bgcolor) {
    if ($arg && $arg !~ /^\#[0-9a-fA-F]{6}$/) {
      pod2usage({ -message => 'Invalid color! Use HTML hex color format, e.g. #FF0000', -exit_status => 2 });
    }
  }

  # Invalid correction value
  if ($correction !~ /^[MLQH]$/) { pod2usage({ -message => 'Invalid correction value', -exit_status => 2 }); }

}

sub show_debug () {
  say "SSID:     $ssid";
  say "PASSWORD: $password";
  say "FILENAME: $filename";
  say "BARCODE:  " . barcode_string();
}

sub write_qrcode() {
  my $qrcode = Imager::QRCode->new(
    size   => int($dotsize),
    margin => int($margin),

    # version       => 1,
    level         => uc($correction),
    casesensitive => 1,
    lightcolor    => Imager::Color->new($bgcolor || @DEFAULT_BGCOLOR),
    darkcolor     => Imager::Color->new($color   || @DEFAULT_COLOR),
  );

  my $img = $qrcode->plot(barcode_string())
    or die "Failed to make carcode: $!";

  $img->write(file => $filename)
    or die "Failed to write file $filename: " . $img->errstr;

  say "\nWrote barcode to file: $filename\n";
}

__END__

=head1 NAME

Wifi-QRCodde - Wifi QRCode Generator

=head1 SYNOPSIS

wifi-qrcode.pl [options] [ssid] [password]

  # Barcode with red color
  wifi_qrcode.pl --color="#AA0000' mynetwork mypassword

  # Larger dotsize without a password
  wifi_qrcode.pl --margin=5 --dotsize=4 mynetwork

  # Larger dotsize, best error correction
  wifi_qrcode --dotsize=5 --correction=Q mynetwork mypassword

=head1 OPTIONS

=over 4

=item B<ssid>

SSID of wifi network

Required

=item B<password>

Password for wifi network

Optional

=item B<--authtype>

WPA or WEP

Default: WPA

=item B<--hidden>

Indicate if SSID is a hidden network

Default: false

=item B<--bgcolor>

Image background color as HTML Hex value, e.g. #FF0000

Default: transparent

=item B<--color>

Image foreground color as HTML Hex value, e.g. #FF0000

Default: #000000

=item B<--margin>

Image margin around qrcode in pixels

Default: 2

=item B<--dotsize>

The pixel dot size of the qrcode

=item B<--correction>

Error correction level. Valid values are M, L, Q or H

Default: L

=item B<--help>

Display this help message

=back

=head1 DESCRIPTION

This program will generate a QR code for your wifi network. When a mobile
device scans the QR code, the device acquires your wifi credentials.

=head1 SEE ALSO

See L<https://qrcode.com>

See L<https://github.com/zxing/zxing/wiki/Barcode-Contents#wi-fi-network-config-android-ios-11>
for details about the barcode format generated by the script

See L<https://fukuchi.org/works/qrencode/index.html.en>

=cut
